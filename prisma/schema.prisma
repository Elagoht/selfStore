generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         String   @id @default(uuid())
  email      String
  passphrase String
  createdAt  DateTime @default(now())
  lastLogin  DateTime @default(now())
}

model Developer {
  id            String    @id @unique @default(uuid())
  username      String    @unique
  realName      String?
  email         String    @unique
  passphrase    String
  approved      Boolean   @default(false)
  gitProfileUrl String
  bio           String?
  websiteUrl    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  lastLogin     DateTime  @default(now())

  applications Application[]
}

model Application {
  id String @id @default(uuid())

  // Developer editable fields
  name            String
  reverseDomain   String  @unique
  dockerImageUser String
  dockerImageName String  @unique
  dockerImageTag  String  @default("latest")
  description     String
  spot            String
  logo            String
  sourceCode      String
  license         License

  // Developer editable optional fields
  dockerRegistryUrl String?
  websiteUrl        String?
  privacyPolicyUrl  String?
  termsOfServiceUrl String?
  supportUrl        String?
  supportEmail      String?

  // Admin editable fields
  publishStatus PublishStatus @default(REQUESTED)
  editorsChoice Boolean       @default(false)

  // Automatically set fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime  @default(now())
  deletedAt DateTime?

  // Relations
  developerId    String
  Developer      Developer                  @relation(fields: [developerId], references: [id])
  updateRequests ApplicationUpdateRequest[]
}

model ApplicationUpdateRequest {
  id            String      @id @default(uuid())
  // Application that this update request is for
  reverseDomain String      @unique
  application   Application @relation(fields: [reverseDomain], references: [reverseDomain])

  // Fields can be updated by the developer
  name              String?
  dockerImageTag    String?
  dockerRegistryUrl String?
  description       String?
  logo              String?
  sourceCode        String?
  websiteUrl        String?
  privacyPolicyUrl  String?
  termsOfServiceUrl String?
  supportUrl        String?
  supportEmail      String?
  license           License?
  architecture      Architecture?

  // Request status
  status UpdateRequestStatus @default(PENDING)

  // Admin notes
  adminNotes String?

  // Standard timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  reviewedAt DateTime?
}

enum PublishStatus {
  REQUESTED
  REVIEWING
  REJECTED
  PUBLISHED
  UNPUBLISHED
  REMOVED
  ORPHANED
}

enum License {
  GPLv3
  GPLv2
  MIT
  APACHE
  BSD
  CC0
  UNLICENSED
  OTHER
}

enum UpdateRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Architecture {
  ARM64
  AMD64
  RISC
  CISC
}
